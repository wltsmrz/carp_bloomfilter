(load "https://github.com/wltsmrz/carp_bitset@v0.3.0")
(load "https://github.com/wltsmrz/carp_murmurhash3@v0.5.0")

(deftype BloomFilterT [ ok Int, om Int, bs (Array Uint64) ])

(defmodule BloomFilter
  (hidden u64mod)
  (deftemplate u64mod (Fn [Uint32 Int] Uint64)
    "uint64_t $NAME(uint32_t m, int n)"
    "$DECL { return (uint64_t)(m%n); }")

  (hidden u32)
  (deftemplate u32 (Fn [Int] Uint32)
    "uint32_t $NAME(int v)"
    "$DECL { return (uint32_t)v; }")

  (hidden ln2)
  (def ln2 (log 2.0))

  (hidden ln2squared)
  (def ln2squared (pow ln2 2.0))

  (hidden optimal-k)
  (defn optimal-k [fp]
    (to-int (ceil (/ (* -1.0 (log fp)) ln2))))

  (hidden optimal-m)
  (defn optimal-m [fp count]
    (to-int (ceil (/ (* (* -1.0 (from-int count)) (log fp)) ln2squared))))

  (hidden bitset-index)
  (defn bitset-index [bloom h]
    (u64mod h @(BloomFilterT.om bloom)))

  (defn add [bloom x]
    (for [i 0 @(BloomFilterT.ok bloom)]
      (let-do [h (Murmur3.hash-32x1 &x (u32 i))]
        (BitSet.add! (BloomFilterT.bs bloom) (bitset-index bloom h)))))

  (defn contains? [bloom x]
    (let-do [res true]
      (for [i 0 @(BloomFilterT.ok bloom)]
        (let-do [h (Murmur3.hash-32x1 &x (u32 i))]
          (when (not (BitSet.contains? (BloomFilterT.bs bloom) (bitset-index bloom h)))
            (do (set! res false) (break))))) res))

  (defn init [fpr dm]
    (let [ok (optimal-k fpr) om (optimal-m fpr dm)]
      (BloomFilterT.init ok om
        (BitSet.init-with-bit-capacity om))))

  (defn load [bloom bytes]
    (BloomFilterT.init
      @(BloomFilterT.ok bloom)
      @(BloomFilterT.om bloom)
      (BitSet.from-array &(Binary.unsafe-bytes->int64-seq (ByteOrder.LittleEndian) bytes))))

  (defn dump [bloom]
    (Binary.int64-seq->bytes (ByteOrder.LittleEndian) (BloomFilterT.bs bloom)))
)

